#include <iostream>
#include <algorithm>

using namespace std;

class Permutation
 {
private:
    int* num;
    int sz;

public:
    Permutation(int n) : sz(n) 
    {
        num = new int[sz];
        for (int i = 0; i < sz; i++)
         {
            num[i] = i;
        }
    }

    Permutation(int n, int* arr) : sz(n) 
    {
        num = new int[sz];
        for (int i = 0; i < sz; i++) 
        {
            num[i] = arr[i];
        }
    }

    Permutation(unsigned int n) : sz(n)
     {
        num = new int[sz];
        for (int i = 0; i < sz; i++) 
        {
            num[i] = i;
        }
    }

    ~Permutation()
     {
        delete[] num;
    }

    void print() 
    {
        for (int i = 0; i < sz; i++)
         {
            cout << num[i] << " ";
        }
        cout << '\n';
    }

    void next_permutation()
     {
        next_permutation(num, num + sz);
    }

    void previous_permutation()
     {
        prev_permutation(num, num + sz);
    }

    Permutation compose(const Permutation& other) const 
    {
        int* res = new int[sz];
        for (int i = 0; i < sz; i++) 
        {
            res[i] = other.num[num[i]];
        }
        Permutation composed(sz, res);
        delete[] res;
        return composed;
    }

    bool operator<(const Permutation& other) const 
    {
        for (int i = 0; i < sz; i++)
         {
            if (num[i] < other.num[i]) 
            {
            	return true;
            }
            else if (num[i] > other.num[i]) 
            {
            	return false;
            }
        }
        return false;
    }

    bool operator==(const Permutation& other) const 
    {
        for (int i = 0; i < sz; i++)
         {
            if (num[i] != other.num[i]) 
            {
            	return false;
            }
        }
        return true;
    }

    bool operator!=(const Permutation& other) const 
    {
        return !(*this == other);
    }

    bool operator>(const Permutation& other) const 
    {
        return other < *this;
    }

    bool operator<=(const Permutation& other) const 
    {
        return !(other < *this);
    }

    bool operator>=(const Permutation& other) const
     {
        return !(*this < other);
    }

    Permutation& operator++()
     {
        next_permutation();
        return *this;
    }

    Permutation operator++(int) 
    {
        Permutation tmp = *this;
        next_permutation();
        return tmp;
    }

    Permutation& operator--()
     {
        previous_permutation();
        return *this;
    }

    Permutation operator--(int) 
    {
        Permutation tmp = *this;
        previous_permutation();
        return tmp;
    }
};

int main()
 {
    int n;
    cin >> n;
    int* arr;
    arr = new int[n];
    for(int i = 0; i< n; i++)
    {
            cin >> arr[i];
    }
    Permutation perm(n, arr);

    perm.print();

    ++perm;
    perm.print();

    --perm;
    perm.print();
    perm++;
    for(int i = 0; i < n; i++)
    {
            perm++;
            perm.print();
    }
    perm.compose(perm);
    perm.print();

    return 0;
}