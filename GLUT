#include <iostream>
#include <cstdio>
#include <cmath>
#include <time.h>
#include <cstdlib>
#include "glut.h"

// Ïðîòîòèïû ãëîáàëüíûõ ôóíêöèé

void RenderScene(void);
void SetupRC(void);
void ChangeSize(int, int);
void TimerFunction(int);
void keyboardFunc(unsigned char, int, int);

const int COUNTB = 10;
double R = 10, step, alpha;
bool flag = 0;
int i1 = 0;
double ArrBall[COUNTB][5];
double Arr[COUNTB];

GLfloat windowWidth = 100;
GLfloat windowHeight = 100;

void DrawRect(float x1, float y1, float x2, float y2, int Fillflag)
{
	glBegin(Fillflag ? GL_QUADS : GL_LINE_LOOP);
	glVertex2f(x1, y1);
	glVertex2f(x2, y1);
	glVertex2f(x2, y2);
	glVertex2f(x1, y2);
	glEnd();
}

void DrawLine(float x1, float y1, float x2, float y2)
{
	glBegin(GL_LINES);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glEnd();
}

void DrawCircle(float x, float y, float R, int FillFlag)
{
	int N = 360;
	glBegin(FillFlag ? GL_TRIANGLE_FAN : GL_LINE_LOOP);
	for (int i = 1; i <= N; i++)
	{
		glVertex2f(x + R * cos(2 * 3.14 / N * i), y + R * sin(2 * 3.14 / N * i));
	}
	glEnd();
}

void main(int argc, char* argv[])
{
	srand(time(NULL));
	for (int i = 0; i < COUNTB; i++)
	{
		bool f = true;
		while (f)
		{
			ArrBall[i][0] = -windowWidth + R + rand() % (2 * (int)(windowWidth - 2 * R));
			ArrBall[i][1] = -windowHeight + R + rand() % (2 * (int)(windowHeight - 2 * R));
			for (int j = 0; j < i; j++)
			{
				double d = ((ArrBall[i][0] - ArrBall[j][0]) * (ArrBall[i][0] - ArrBall[j][0]) + (ArrBall[i][1] - ArrBall[j][1]) * (ArrBall[i][1] - ArrBall[j][1]));
				if (d < 4 * R * R)
				{
					f = true;
				}
			}
		}
		Arr[i] = rand() % 360;
		ArrBall[i][3] = (double)rand() / RAND_MAX; // êðàñíûé öâåò
		ArrBall[i][4] = (double)rand() / RAND_MAX; // çåëåíûé öâåò
		ArrBall[i][5] = (double)rand() / RAND_MAX; // ñèíèé öâåò
	}
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(600, 600);
	glutCreateWindow("Bounce");
	glutDisplayFunc(RenderScene);
	glutReshapeFunc(ChangeSize);
	glutKeyboardFunc(keyboardFunc);
	glutTimerFunc(10, TimerFunction, 1);
	SetupRC();
	glutMainLoop();
}

void RenderScene(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	for (int i = 0; i < COUNTB; i++)
	{
		glColor3f(ArrBall[i][3], ArrBall[i][4], ArrBall[i][5]);
		DrawCircle(ArrBall[i][0], ArrBall[i][1], R, 1);
	}
	glutSwapBuffers();
}

void TimerFunction(int value)
{
	if (flag)
	{
		for (int i = 0; i < COUNTB; i++)
		{
			double alphaPi = Arr[i] * 3.14 / 180;
			double xt = ArrBall[i][0];
			double yt = ArrBall[i][1];
			int alpha = Arr[i];
			xt = xt + step * cos(alphaPi);
			yt = yt + step * sin(alphaPi);
			if (yt + R >= 100 || yt - R <= -100)
			{
				alpha = 360 - alpha;
			}
			if (xt + R >= 100 || xt - R <= -100)
			{
				alpha = 180 - alpha;
			}
			if (alpha < 0)
			{
				alpha += 360;
			}
			if (alpha > 360)
			{
				alpha -= 360;
			}
			ArrBall[i][0] = xt;
			ArrBall[i][1] = yt;
			Arr[i] = alpha;
		}
		for (int i = 0; i < COUNTB; i++)
		{
			for (int j = 0; j < i; j++)
			{
				double d = sqrt(ArrBall[i][0] - ArrBall[j][0]) * sqrt(ArrBall[i][0] - ArrBall[j][0]) + sqrt(ArrBall[i][1] - ArrBall[j][1]) * sqrt(ArrBall[i][1] - ArrBall[j][1]);
				if (d <= 2 * R)
				{
					double k = (ArrBall[i][1] - ArrBall[j][1]) / (ArrBall[i][0] - ArrBall[i][1]);
					double ug = 180 * atan(k) / 3.14;
					Arr[i] = 180 + 2 * ug - Arr[i];
					Arr[j] = 180 + 2 * ug - Arr[j];
					if (Arr[i] < 0)
					{
						Arr[i] += 360;
					}
					if (Arr[j] < 0)
					{
						Arr[j] += 360;
					}
					if (Arr[i] > 360)
					{
						Arr[i] -= 360;
					}
					if (Arr[j] > 360)
					{
						Arr[j] -= 360;
					}
					ArrBall[i][0] += step * cos(Arr[i] * 3.14 / 180);
					ArrBall[i][1] += step * sin(Arr[i] * 3.14 / 180);
					ArrBall[j][0] += step * cos(Arr[j] * 3.14 / 180);
					ArrBall[j][1] += step * sin(Arr[j] * 3.14 / 180);
				}
			}
		}
	}
	glutPostRedisplay();
	glutTimerFunc(10, TimerFunction, 1);
}

void SetupRC(void)
{
	glClearColor(0.3f, 0.4f, 0.9f, 1.0f);
}

void ChangeSize(int width, int height)
{
	GLfloat aspectRatio;
	if (height == 0)
	{
		height = 1;
	}
	if (width == 0)
	{
		width = 1;
	}
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	aspectRatio = (GLfloat)width / (GLfloat)height;
	if (width <= height)
	{
		windowWidth = 100;
		windowHeight = 100 / aspectRatio;
		glOrtho(-100, 100, -windowHeight, windowHeight, 1, -1);
	}
	else
	{
		windowWidth = 100 * aspectRatio;
		windowHeight = 100;
		glOrtho(-windowWidth, windowWidth, -100, 100, 1, -1);
	}
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboardFunc(unsigned char key, int x, int y)
{
	if (key == 27)
	{
		exit(0);
	}
	if ((key == ' ') && !flag)
	{
		step = 0.5;
		flag = true;
	}
}
