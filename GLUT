#include <iostream>
#include <algorithm>

class Permutation {
private:
    int* data;
    int size;

public:
    Permutation(int n) : size(n) {
        data = new int[size];
        for (int i = 0; i < size; ++i) {
            data[i] = i;
        }
    }

    Permutation(int n, int* arr) : size(n) {
        data = new int[size];
        for (int i = 0; i < size; ++i) {
            data[i] = arr[i];
        }
    }

    Permutation(unsigned int n) : size(n) {
        data = new int[size];
        for (int i = 0; i < size; ++i) {
            data[i] = i;
        }
    }

    ~Permutation() {
        delete[] data;
    }

    void print() {
        for (int i = 0; i < size; ++i) {
            std::cout << data[i] << " ";
        }
        std::cout << std::endl;
    }

    void next_permutation() {
        std::next_permutation(data, data + size);
    }

    void previous_permutation() {
        std::prev_permutation(data, data + size);
    }

    Permutation compose(const Permutation& other) const {
        int* result = new int[size];
        for (int i = 0; i < size; ++i) {
            result[i] = other.data[data[i]];
        }
        Permutation composed(size, result);
        delete[] result;
        return composed;
    }

    bool operator<(const Permutation& other) const {
        for (int i = 0; i < size; ++i) {
            if (data[i] < other.data[i]) return true;
            else if (data[i] > other.data[i]) return false;
        }
        return false;
    }

    bool operator==(const Permutation& other) const {
        for (int i = 0; i < size; ++i) {
            if (data[i] != other.data[i]) return false;
        }
        return true;
    }

    bool operator!=(const Permutation& other) const {
        return !(*this == other);
    }

    bool operator>(const Permutation& other) const {
        return other < *this;
    }

    bool operator<=(const Permutation& other) const {
        return !(other < *this);
    }

    bool operator>=(const Permutation& other) const {
        return !(*this < other);
    }

    Permutation& operator++() {
        next_permutation();
        return *this;
    }

    Permutation operator++(int) {
        Permutation temp = *this;
        next_permutation();
        return temp;
    }

    Permutation& operator--() {
        previous_permutation();
        return *this;
    }

    Permutation operator--(int) {
        Permutation temp = *this;
        previous_permutation();
        return temp;
    }
};

int main() {
    int n;
    std::cin >> n;
    int* arr;
    arr = new int[n];
    for(int i = 0; i< n; i++)
    {
    	std::cin >> arr[i];
    }
    Permutation perm(n, arr);

    perm.print();

    ++perm;
    perm.print();

    --perm;
    perm.print();
    perm++;
    for(int i = 0; i < n; i++)
    {
    	perm++;
    	perm.print();
    }
    perm.compose(perm);
    perm.print();

    return 0;
}