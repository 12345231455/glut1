#include <iostream>
#include <algorithm>

using namespace std;

class Permutation
{
private:
    int* num;
    int sz;

public:
    Permutation(int n) : sz(n)
    {
        num = new int[sz];
        for (int i = 0; i < sz; i++)
        {
            num[i] = i;
        }
    }

    Permutation(int n, int* arr) : sz(n)
    {
        num = new int[sz];
        for (int i = 0; i < sz; i++)
        {
            num[i] = arr[i];
        }
    }

    Permutation(unsigned int n) : sz(n)
    {
        num = new int[sz];
        for (int i = 0; i < sz; i++)
        {
            num[i] = i;
        }
    }

    ~Permutation()
    {
        delete[] num;
    }

    void print()
    {
        for (int i = 0; i < sz; i++)
        {
            cout << num[i] << " ";
        }
        cout << '\n';
    }

    void Swap(int& a, int& b)
    {
        int tmp = a;
        a = b;
        b = tmp;
    }

    void Next_permutation()
    {
        int i = sz - 1;
        while (num[i - 1] >= num[i])
        {
            if (i - 1 == 0)
            {
                return;
            }
        }
        int j = sz - 1;
        while (j > i && num[j] <= num[i - 1]) 
        {
            j--;
        }
        Swap(num[i - 1], num[j]);
    }

    void Previous_permutation()
    {
        int i = sz - 1;
        while (i > 0 && num[i - 1] <= num[i])
        {
            if (i - 1 == 0) 
            {
                return;
            }
        }
        int j = i;
        while (j < sz && num[j] <= num[i - 1])
        {
            j++;
        }
        j--;
        Swap(num[i - 1], num[j]);
    }

    Permutation compose(const Permutation& other) const
    {
        int* res = new int[sz];
        for (int i = 0; i < sz; i++)
        {
            res[i] = other.num[num[i] - 1];
        }
        Permutation composed(sz, res);
        delete[] res;
        return composed;
    }

    bool operator<(const Permutation& other) const
    {
        for (int i = 0; i < sz; i++)
        {
            if (num[i] < other.num[i])
            {
                return true;
            }
            else if (num[i] > other.num[i])
            {
                return false;
            }
        }
        return false;
    }

    bool operator==(const Permutation& other) const
    {
        for (int i = 0; i < sz; i++)
        {
            if (num[i] != other.num[i])
            {
                return false;
            }
        }
        return true;
    }

    bool operator!=(const Permutation& other) const
    {
        return !(*this == other);
    }

    bool operator>(const Permutation& other) const
    {
        return other < *this;
    }

    bool operator<=(const Permutation& other) const
    {
        return !(other < *this);
    }

    bool operator>=(const Permutation& other) const
    {
        return !(*this < other);
    }

    Permutation& operator++()
    {
        Next_permutation();
        return *this;
    }

    Permutation operator++(int)
    {
        Permutation tmp = *this;
        Next_permutation();
        return tmp;
    }

    Permutation& operator--()
    {
        Previous_permutation();
        return *this;
    }

    Permutation operator--(int)
    {
        Permutation tmp = *this;
        Previous_permutation();
        return tmp;
    }
};

int main()
{
    int n;
    cin >> n;
    int* arr;
    arr = new int[n];
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Permutation perm(n, arr);

    perm.print();

    ++perm;
    perm.print();

    --perm;
    perm.print();
    perm++;
    perm.compose(perm);
    perm.print();

    return 0;
}
